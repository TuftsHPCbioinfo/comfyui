# Use Ubuntu base with Python 3.12
FROM ubuntu:24.04

# Probably also needs the latest cuda import, ninja (python), and cuda-toolkit (system); add accordingly

# --- BUILD ARGUMENTS ---
# Allow version override at build time
ARG COMFYUI_VERSION=v0.3.50
ARG MANAGER_VERSION=3.35
ARG USE_LATEST_COMFYUI=false
ARG USE_LATEST_MANAGER=false
ARG SAGEATTENTION_COMMIT=798c791d276f302d4f19246feffa053a9e4c5af5

# --- ENVIRONMENT & ARGUMENTS ---
ENV DEBIAN_FRONTEND=noninteractive \
    PIP_PREFER_BINARY=1 \
    ROOT=/app \
    PYTHONUNBUFFERED=1 \
    CLI_ARGS="--listen 0.0.0.0" \
    PATH=/app:$PATH

# Arguments for non-root user
ARG UID=1000
ARG GID=1000

WORKDIR ${ROOT}

# --- SYSTEM SETUP & DEPENDENCIES ---
RUN --mount=type=cache,target=/var/cache/apt \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        python3.12 \
        python3.12-venv \
	python3.12-dev \
	python3.12-distutils \
        python3-pip \
	curl \
        git \
        wget \
        libgl1-mesa-glx \
        libglib2.0-0 \
        libgomp1 \
        build-essential && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    # Create non-root user
    groupadd -g ${GID} comfyui && \
    useradd -u ${UID} -g ${GID} -m comfyui && \
    # Set python3.12 as default
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.12 1

# --- COMFYUI INSTALLATION ---
# Clone and checkout with proper tag handling
RUN git clone https://github.com/comfyanonymous/ComfyUI.git . && \
    cd ${ROOT} && \
    git fetch --prune --tags origin && \
    if [ "${USE_LATEST_COMFYUI}" = "true" ]; then \
        CHECKOUT_TAG=$(git tag --sort=-v:refname | head -n 1); \
        echo "Using latest ComfyUI tag: ${CHECKOUT_TAG}"; \
    else \
        CHECKOUT_TAG=${COMFYUI_VERSION}; \
        echo "Using specified ComfyUI tag: ${CHECKOUT_TAG}"; \
    fi && \
    git checkout "tags/${CHECKOUT_TAG}" -f && \
    git show-ref --tags ${CHECKOUT_TAG}

# --- PYTHON DEPENDENCIES ---
# Install PyTorch with CUDA 12.9 support first, then ComfyUI requirements
RUN --mount=type=cache,target=/root/.cache/pip \
    python3 -m pip install --upgrade pip setuptools wheel && \
    # Install PyTorch with CUDA 12.9
    python3 -m pip install torch torchvision --index-url https://download.pytorch.org/whl/cu129 && \
    # Install ComfyUI requirements
    python3 -m pip install -r requirements.txt

# --- SAGEATTENTION INSTALLATION ---
# Clone and compile SageAttention from source at specific commit
RUN cd /tmp && \
    git clone https://github.com/thu-ml/SageAttention.git && \
    cd SageAttention && \
    git checkout ${SAGEATTENTION_COMMIT} && \
    echo "Building SageAttention at commit: $(git rev-parse HEAD)" && \
    # Set parallel compilation flags for faster build
    export EXT_PARALLEL=4 NVCC_APPEND_FLAGS="--threads 8" MAX_JOBS=32 && \
    python3 setup.py install && \
    # Clean up build artifacts to reduce image size
    cd / && \
    rm -rf /tmp/SageAttention

# --- COMFYUI-MANAGER INSTALLATION ---
# Clone and checkout manager with proper tag handling
RUN cd custom_nodes && \
    git clone https://github.com/Comfy-Org/ComfyUI-Manager.git ComfyUI-Manager && \
    cd ComfyUI-Manager && \
    git fetch --prune --tags origin && \
    if [ "${USE_LATEST_MANAGER}" = "true" ]; then \
        if [ "$(git tag | wc -l)" -gt 0 ]; then \
            MANAGER_TAG=$(git tag --sort=-v:refname | head -n 1); \
            echo "Using latest Manager tag: ${MANAGER_TAG}"; \
            git checkout "tags/${MANAGER_TAG}" -f; \
        else \
            echo "No tags found for Manager, using main branch"; \
        fi \
    elif [ "${MANAGER_VERSION}" != "latest" ]; then \
        echo "Using specified Manager tag: ${MANAGER_VERSION}"; \
        git checkout "tags/${MANAGER_VERSION}" -f; \
    else \
        echo "Using Manager main branch"; \
    fi

# --- INSTALL MANAGER REQUIREMENTS ---
# Install ComfyUI-Manager dependencies
RUN --mount=type=cache,target=/root/.cache/pip \
    cd custom_nodes/ComfyUI-Manager && \
    if [ -f requirements.txt ]; then \
        echo "Installing ComfyUI-Manager requirements..." && \
        python3 -m pip install -r requirements.txt; \
    else \
        echo "No requirements.txt found for ComfyUI-Manager"; \
    fi

# --- INTELLIGENT PIP OVERRIDES ---
# Generate smart pip overrides based on final installed state
RUN cat > /tmp/generate_pip_overrides.py << 'EOF'
#!/usr/bin/env python3
import json
import subprocess
import re
from typing import Dict, Optional

def get_installed_version(package_name: str) -> Optional[str]:
    try:
        result = subprocess.run(
            ['python3', '-m', 'pip', 'show', package_name],
            capture_output=True, text=True, check=True
        )
        for line in result.stdout.split('\n'):
            if line.startswith('Version:'):
                return line.split(':', 1)[1].strip()
    except subprocess.CalledProcessError:
        return None

def normalize_package_name(name: str) -> str:
    return name.lower().replace('_', '-')

def extract_base_package(spec: str) -> str:
    spec = re.sub(r'\[.*?\]', '', spec)
    spec = re.sub(r'[<>=!~].*', '', spec)
    return spec.strip()

# Extended critical packages list
CRITICAL_PACKAGES = {
    'numpy', 'torch', 'torchvision', 'torchaudio', 
    'scipy', 'pillow', 'transformers', 'safetensors',
    'tokenizers', 'huggingface-hub'  # Added since manager uses these
}

DEFAULT_OVERRIDES = {
    "imageio-ffmpeg": "imageio",
    "imageio[ffmpeg]": "imageio",
    "imageio_ffmpeg": "imageio",
    "diffusers~=0.21.4": "diffusers",
    "huggingface_hub": "huggingface-hub",
    "numpy<1.24>=1.18": "numpy",
    "numpy>=1.18.5, <1.25.0": "numpy",
    "opencv-contrib-python": "opencv-contrib-python-headless",
    "opencv-python": "opencv-contrib-python-headless",
    "opencv-python-headless": "opencv-contrib-python-headless",
    "opencv-python-headless[ffmpeg]<=4.7.0.72": "opencv-contrib-python-headless",
    "opencv-python>=4.7.0.72": "opencv-contrib-python-headless",
    "pandas<=1.5.1": "pandas",
    "scikit-image==0.20.0": "scikit-image",
    "scipy>=1.11.4": "scipy",
    "segment_anything": "segment-anything",
    "timm==0.6.5": "timm",
    "timm>=0.4.12": "timm",
    "transformers==4.26.1": "transformers"
}

def generate_smart_overrides() -> Dict[str, str]:
    smart_overrides = {}
    
    for original_spec, override_spec in DEFAULT_OVERRIDES.items():
        base_package = extract_base_package(override_spec)
        normalized_name = normalize_package_name(base_package)
        
        if normalized_name in {normalize_package_name(p) for p in CRITICAL_PACKAGES}:
            installed_version = get_installed_version(base_package)
            if installed_version:
                smart_overrides[original_spec] = f"{base_package}=={installed_version}"
                print(f"Pinning {base_package} to installed version: {installed_version}")
            else:
                smart_overrides[original_spec] = override_spec
        else:
            smart_overrides[original_spec] = override_spec
    
    return smart_overrides

# Generate and save
overrides = generate_smart_overrides()
with open('pip_overrides.json.template', 'w') as f:
    json.dump(overrides, f, indent=4)
with open('pip_overrides.osx.template', 'w') as f:
    json.dump(overrides, f, indent=4)
print("Smart pip overrides generated successfully")
EOF

# Apply smart pip overrides to ComfyUI-Manager
RUN cd custom_nodes/ComfyUI-Manager && \
    echo "Generating intelligent pip overrides..." && \
    python3 /tmp/generate_pip_overrides.py && \
    echo "Applied smart pip overrides to ComfyUI-Manager" && \
    rm /tmp/generate_pip_overrides.py

# --- PERMISSIONS ---
RUN chown -R comfyui:comfyui ${ROOT}

# Switch to non-root user
USER comfyui

# --- RUN ---
CMD ["python3", "main.py", "--listen", "0.0.0.0"]
