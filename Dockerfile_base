# ----------------------------------------------------------------------
# 1️⃣ Base image – CUDA‑devel + PyTorch (includes nvcc, CUDA_HOME, etc.)
# ----------------------------------------------------------------------
FROM pytorch/pytorch:2.8.0-cuda12.9-cudnn9-devel AS build

# ----------------------------------------------------------------------
# 2️⃣ Build‑time arguments (override with `--build-arg …` if you like)
# ----------------------------------------------------------------------
ARG UID=1000
ARG GID=1000
ARG COMFYUI_VERSION=v0.3.50          # default tag to checkout
ARG MANAGER_VERSION=latest           # can be a tag like v3.35
ARG USE_LATEST_MANAGER=false
ARG USE_LATEST_COMFYUI=false
ARG SAGEATTENTION_COMMIT=main        # or a specific commit SHA
ARG MANAGER_TAG=                     # optional, overrides MANAGER_VERSION

# ----------------------------------------------------------------------
# 3️⃣ Global environment
# ----------------------------------------------------------------------
ENV DEBIAN_FRONTEND=noninteractive \
    PIP_PREFER_BINARY=1 \
    ROOT=/app \
    LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH" \
    PYTHONUNBUFFERED=1 \
    CLI_ARGS="--listen 0.0.0.0" \
    PATH="/app:/usr/local/cuda/bin:${PATH}" \
    CUDA_HOME="/usr/local/cuda"

WORKDIR ${ROOT}

# ----------------------------------------------------------------------
# 4️⃣ System packages & non‑root user (single layer)
# ----------------------------------------------------------------------
RUN --mount=type=cache,target=/var/cache/apt \
    groupadd -g ${GID} comfyui && \
    useradd -u ${UID} -g ${GID} -m -s /bin/bash comfyui && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        git \
        vim \
        libgl1-mesa-glx \
        libglib2.0-0 \
        python3-dev \
        gcc g++ \
        build-essential \
        cmake && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# ----------------------------------------------------------------------
# 5️⃣ Clone the core repo and the “official” custom nodes
# ----------------------------------------------------------------------
RUN git clone --branch ${COMFYUI_VERSION} --depth 1 https://github.com/comfyanonymous/ComfyUI.git . 

# ----------------------------------------------------------------------
# 6️⃣ Python & PyTorch (CUDA‑compatible) + all other pip deps
# ----------------------------------------------------------------------
# 6.1 Upgrade pip & install the exact torch build that matches CUDA 12.9
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir \
        torch==2.8.0+cu129 \
        torchvision==0.23.0+cu129 \
        torchaudio==2.8.0+cu129 \
        --extra-index-url https://download.pytorch.org/whl/cu129


# 6.2 Install the rest of the Python stack in one go (reduces resolver churn)
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-cache-dir \
        protobuf==4.25.8 \
        grpcio==1.59.3 grpcio-status==1.59.3 \
        bitsandbytes \
        torchsde \
        onnxruntime-gpu \
        ninja \
        triton \
        opencv-python \
        spandrel \
        kornia \
        volcengine \
        google-generativeai \
        matplotlib \
        scikit-image \
        diffusers \
        segment_anything \
        -r requirements.txt 
# ----------------------------------------------------------------------
# 7️⃣ SageAttention – compile from source
# ----------------------------------------------------------------------
ENV TORCH_CUDA_ARCH_LIST="8.0, 8.6, 8.9, 9.0"
RUN git clone https://github.com/thu-ml/SageAttention.git 

COPY setup.py /app/SageAttention/setup.py
RUN sed -i "/compute_capabilities = set()/a compute_capabilities = {\"$TORCH_CUDA_ARCH_LIST\"}" /app/SageAttention/setup.py

RUN cd /app/SageAttention \q
        && python3 setup.py install
# ----------------------------------------------------------------------
# 8️⃣ ComfyUI‑Manager – proper tag handling (no “tags/” prefix)
# ----------------------------------------------------------------------
RUN cd custom_nodes && \
    git clone https://github.com/Comfy-Org/ComfyUI-Manager.git ComfyUI-Manager && \
    cd ComfyUI-Manager && \
    git fetch --prune --tags origin && \
    if [ "${USE_LATEST_MANAGER}" = "true" ]; then \
        LATEST_TAG=$(git tag --sort=-v:refname | head -n1); \
        echo "Using latest Manager tag: ${LATEST_TAG}"; \
        git checkout "${LATEST_TAG}" -f; \
    elif [ -n "${MANAGER_TAG}" ]; then \
        echo "Using supplied Manager tag ${MANAGER_TAG}"; \
        git checkout "${MANAGER_TAG}" -f; \
    elif [ "${MANAGER_VERSION}" != "latest" ]; then \
        echo "Using specified Manager tag: ${MANAGER_VERSION}"; \
        git checkout "${MANAGER_VERSION}" -f; \
    else \
        echo "Staying on Manager main branch"; \
    fi

# --- INTELLIGENT PIP OVERRIDES ---
# Generate smart pip overrides based on final installed state
RUN mkdir -p /tmp && \
    cat > /tmp/generate_pip_overrides.py <<'EOF'
import json
import subprocess
import re
from typing import Dict, Optional

def get_installed_version(package_name: str) -> Optional[str]:
    try:
        result = subprocess.run(
            ['python3', '-m', 'pip', 'show', package_name],
            capture_output=True, text=True, check=True
        )
        for line in result.stdout.split('\n'):
            if line.startswith('Version:'):
                return line.split(':', 1)[1].strip()
    except subprocess.CalledProcessError:
        return None

def normalize_package_name(name: str) -> str:
    return name.lower().replace('_', '-')

def extract_base_package(spec: str) -> str:
    spec = re.sub(r'\[.*?\]', '', spec)
    spec = re.sub(r'[<>=!~].*', '', spec)
    return spec.strip()

CRITICAL_PACKAGES = {
    'numpy', 'torch', 'torchvision', 'torchaudio',
    'scipy', 'pillow', 'transformers', 'safetensors',
    'tokenizers', 'huggingface-hub'
}

DEFAULT_OVERRIDES = {
    "imageio-ffmpeg": "imageio",
    "imageio[ffmpeg]": "imageio",
    "imageio_ffmpeg": "imageio",
    "diffusers~=0.21.4": "diffusers",
    "huggingface_hub": "huggingface-hub",
    "numpy<1.24>=1.18": "numpy",
    "numpy>=1.18.5, <1.25.0": "numpy",
    "opencv-contrib-python": "opencv-contrib-python-headless",
    "opencv-python": "opencv-contrib-python-headless",
    "opencv-python-headless": "opencv-contrib-python-headless",
    "opencv-python-headless[ffmpeg]<=4.7.0.72": "opencv-contrib-python-headless",
    "opencv-python>=4.7.0.72": "opencv-contrib-python-headless",
    "pandas<=1.5.1": "pandas",
    "scikit-image==0.20.0": "scikit-image",
    "scipy>=1.11.4": "scipy",
    "segment_anything": "segment-anything",
    "timm==0.6.5": "timm",
    "timm>=0.4.12": "timm",
    "transformers==4.26.1": "transformers"
}

def generate_smart_overrides() -> Dict[str, str]:
    smart_overrides = {}
    for original_spec, override_spec in DEFAULT_OVERRIDES.items():
        base_package = extract_base_package(override_spec)
        normalized_name = normalize_package_name(base_package)

        if normalized_name in {normalize_package_name(p) for p in CRITICAL_PACKAGES}:
            installed_version = get_installed_version(base_package)
            if installed_version:
                smart_overrides[original_spec] = f"{base_package}=={installed_version}"
                print(f"Pinning {base_package} to installed version: {installed_version}")
            else:
                smart_overrides[original_spec] = override_spec
        else:
            smart_overrides[original_spec] = override_spec
    return smart_overrides

overrides = generate_smart_overrides()
with open('pip_overrides.json.template', 'w') as f:
    json.dump(overrides, f, indent=4)
with open('pip_overrides.osx.template', 'w') as f:
    json.dump(overrides, f, indent=4)
print("Smart pip overrides generated successfully")
EOF

# Apply smart pip overrides to ComfyUI-Manager
RUN if [ -d custom_nodes/ComfyUI-Manager ]; then \
      cd custom_nodes/ComfyUI-Manager && \
      echo "Generating intelligent pip overrides..." && \
      python3 /tmp/generate_pip_overrides.py && \
      echo "Applied smart pip overrides to ComfyUI-Manager"; \
    else \
      echo "WARNING: custom_nodes/ComfyUI-Manager not found, skipping overrides."; \
    fi && \
    rm /tmp/generate_pip_overrides.py
# ----------------------------------------------------------------------
# 10️⃣ Final housekeeping – set ownership and drop privileges
# ----------------------------------------------------------------------
RUN chown -R comfyui:comfyui ${ROOT} && chmod +x ${ROOT}/*.py
ENV PATH = "${PATH}:${ROOT}"

USER comfyui

CMD ["sh", "-c", "python3 ${ROOT} main.py $CLI_ARGS"]
